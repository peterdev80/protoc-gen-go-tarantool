// Code generated by protoc-gen-go-tarantool. DO NOT EDIT.

package pb

import (
	"fmt"
	"github.com/vmihailenco/msgpack/v5"
)

func (x *AttrValue) EncodeMsgpack(enc *msgpack.Encoder) error {
	if err := enc.EncodeArrayLen(6); err != nil {
		return err
	}
	if err := enc.EncodeString(x.UnitGuid); err != nil {
		return err
	}
	if err := enc.EncodeString(x.ObjectId); err != nil {
		return err
	}
	if err := enc.EncodeString(x.AttrId); err != nil {
		return err
	}
	if err := enc.EncodeInt64(x.Timestamp); err != nil {
		return err
	}
	if err := enc.EncodeFloat64(x.Value); err != nil {
		return err
	}
	if err := enc.Encode(int32(x.Action.Number())); err != nil {
		return err
	}
	return nil
}
func (x *AttrValue) DecodeMsgpack(dec *msgpack.Decoder) error {
	var err error
	var l int
	if l, err = dec.DecodeArrayLen(); err != nil {
		return err
	}
	if l != 6 {
		return fmt.Errorf("array len doesn't match: %d", l)
	}
	if x.UnitGuid, err = dec.DecodeString(); err != nil {
		return err
	}
	if x.ObjectId, err = dec.DecodeString(); err != nil {
		return err
	}
	if x.AttrId, err = dec.DecodeString(); err != nil {
		return err
	}
	if x.Timestamp, err = dec.DecodeInt64(); err != nil {
		return err
	}
	if x.Value, err = dec.DecodeFloat64(); err != nil {
		return err
	}
	enAction, err := dec.DecodeInt32()
	if err != nil {
		return err
	}
	x.Action = Action(enAction)
	return nil
}
func (x *ResponcePutAttrValue) EncodeMsgpack(enc *msgpack.Encoder) error {
	if err := enc.EncodeArrayLen(0); err != nil {
		return err
	}
	return nil
}
func (x *ResponcePutAttrValue) DecodeMsgpack(dec *msgpack.Decoder) error {
	var err error
	var l int
	if l, err = dec.DecodeArrayLen(); err != nil {
		return err
	}
	if l != 0 {
		return fmt.Errorf("array len doesn't match: %d", l)
	}
	return nil
}
func (x *RequestPutAttrValue) EncodeMsgpack(enc *msgpack.Encoder) error {
	if err := enc.EncodeArrayLen(1); err != nil {
		return err
	}
	if err := enc.Encode(x.AttrValues); err != nil {
		return err
	}
	return nil
}
func (x *RequestPutAttrValue) DecodeMsgpack(dec *msgpack.Decoder) error {
	var err error
	var l int
	if l, err = dec.DecodeArrayLen(); err != nil {
		return err
	}
	if l != 1 {
		return fmt.Errorf("array len doesn't match: %d", l)
	}
	l, err = dec.DecodeArrayLen()
	if err != nil {
		return err
	}
	x.AttrValues = make([]*AttrValue, l)
	for n := 0; n < l; n++ {
		if err := dec.Decode(&x.AttrValues[n]); err != nil {
			return err
		}
	}
	return nil
}
func (x *RequestGetAttrValue) EncodeMsgpack(enc *msgpack.Encoder) error {
	if err := enc.EncodeArrayLen(1); err != nil {
		return err
	}
	if err := enc.EncodeInt64(x.BatchSize); err != nil {
		return err
	}
	return nil
}
func (x *RequestGetAttrValue) DecodeMsgpack(dec *msgpack.Decoder) error {
	var err error
	var l int
	if l, err = dec.DecodeArrayLen(); err != nil {
		return err
	}
	if l != 1 {
		return fmt.Errorf("array len doesn't match: %d", l)
	}
	if x.BatchSize, err = dec.DecodeInt64(); err != nil {
		return err
	}
	return nil
}
func (x *GetMessageValue) EncodeMsgpack(enc *msgpack.Encoder) error {
	if err := enc.EncodeArrayLen(3); err != nil {
		return err
	}
	if err := enc.EncodeInt64(x.Id); err != nil {
		return err
	}
	if err := enc.EncodeString(x.Status); err != nil {
		return err
	}
	if err := enc.Encode(x.Data); err != nil {
		return err
	}
	return nil
}
func (x *GetMessageValue) DecodeMsgpack(dec *msgpack.Decoder) error {
	var err error
	var l int
	if l, err = dec.DecodeArrayLen(); err != nil {
		return err
	}
	if l != 3 {
		return fmt.Errorf("array len doesn't match: %d", l)
	}
	if x.Id, err = dec.DecodeInt64(); err != nil {
		return err
	}
	if x.Status, err = dec.DecodeString(); err != nil {
		return err
	}
	if err := dec.Decode(&x.Data); err != nil {
		return err
	}
	return nil
}
func (x *ResponseGetAttrValue) EncodeMsgpack(enc *msgpack.Encoder) error {
	if err := enc.EncodeArrayLen(1); err != nil {
		return err
	}
	if err := enc.Encode(x.AttrValues); err != nil {
		return err
	}
	return nil
}
func (x *ResponseGetAttrValue) DecodeMsgpack(dec *msgpack.Decoder) error {
	var err error
	var l int
	if l, err = dec.DecodeArrayLen(); err != nil {
		return err
	}
	if l != 1 {
		return fmt.Errorf("array len doesn't match: %d", l)
	}
	l, err = dec.DecodeArrayLen()
	if err != nil {
		return err
	}
	x.AttrValues = make([]*GetMessageValue, l)
	for n := 0; n < l; n++ {
		if err := dec.Decode(&x.AttrValues[n]); err != nil {
			return err
		}
	}
	return nil
}
func (x *RequestAck) EncodeMsgpack(enc *msgpack.Encoder) error {
	if err := enc.EncodeArrayLen(1); err != nil {
		return err
	}
	if err := enc.Encode(x.Ids); err != nil {
		return err
	}
	return nil
}
func (x *RequestAck) DecodeMsgpack(dec *msgpack.Decoder) error {
	var err error
	var l int
	if l, err = dec.DecodeArrayLen(); err != nil {
		return err
	}
	if l != 1 {
		return fmt.Errorf("array len doesn't match: %d", l)
	}
	l, err = dec.DecodeArrayLen()
	if err != nil {
		return err
	}
	x.Ids = make([]int64, l)
	for n := 0; n < l; n++ {
		if err := dec.Decode(&x.Ids[n]); err != nil {
			return err
		}
	}
	return nil
}
func (x *ResponseAck) EncodeMsgpack(enc *msgpack.Encoder) error {
	if err := enc.EncodeArrayLen(0); err != nil {
		return err
	}
	return nil
}
func (x *ResponseAck) DecodeMsgpack(dec *msgpack.Decoder) error {
	var err error
	var l int
	if l, err = dec.DecodeArrayLen(); err != nil {
		return err
	}
	if l != 0 {
		return fmt.Errorf("array len doesn't match: %d", l)
	}
	return nil
}
